#방법 1: BFS로 푸는 방법

from collections import deque

m=int(input())
n=int(input())

graph = [[0]*(m+1) for i in range(m+1)]

for i in range(n):
    a,b = map(int, input().split())
    graph[a][b] =1
    graph[b][a] =1
    
visited = [0] * (m+1)

def bfs(v):
    queue = deque([v])
    visited[v] = 1
    result =0
    while queue:
        v = queue.popleft()
        result +=1
        for i in range(1,m+1):
            if not visited[i] and graph[v][i]:
                queue.append(i)
                visited[i] =1
    return result
result =bfs(1)
print(result -1)

#방법 2: DFS로 푸는 방법
m = int(input())
n= int(input())
result =0
graph = [[0]*(m+1) for i in range (m+1)]

for i in range(n):
    a,b = map(int, input().split())
    graph[a][b] =1
    graph[b][a] =1

visited =[0] *(m+1)

def dfs(v):
    global result
    visited[v] =1
    result +=1
    for i in range(m+1):
        if not visited[i] and graph[v][i]:
        dfs(i)
    return result
end = def(1)
print(end-1)
